---
title: "Vôos Nacionais"
---
```{r, warning=FALSE, message=FALSE, echo=FALSE, eval=ifelse(exists('df_output'),FALSE,TRUE)}
#| label: prepare-data
# remotes::install_github("ipeaGIT/flightsbr")
# remotes::install_github("timelyportfolio/quak", ref="htmlwidget", subdir="htmlwidget")
library(flightsbr)
library(data.table)
library(janitor)
library(dplyr)
library(quak)
library(Hmisc)
library(quarto)

# get latest month available
latest_date <- flightsbr:::latest_airfares_date()
last_two_monts <- (latest_date-1):latest_date

# download data
df_dom <- flightsbr::read_airfares(date = last_two_monts) |>
  janitor::clean_names()

# head(df_dom)

# fix numeric columns
df_dom[, tarifa := gsub(',', '.', tarifa)]
df_dom[, tarifa := as.numeric(tarifa)]
df_dom[, assentos := as.numeric(assentos)]
```

```{r, warning=FALSE, message=FALSE, echo=FALSE, eval=ifelse(exists('df_output'),FALSE,TRUE)}
#| label: calculate-rank-and-values

# create unique id for each OD pair
# so that A-B has the same id as B-A
# Sort each pair so that the smaller value is always the first
df_dom[, od_pair := paste0(pmin(origem, destino), "-", pmax(origem, destino))]
df_dom[, id := .GRP, by = od_pair]


# determine top 100 OD pairs
od_rank <- df_dom[, .(total_demand = sum(assentos)),
                  by = .(id, od_pair)][order(-total_demand)]

od_rank <- od_rank |>
  dplyr::slice_max(order_by = total_demand, n = 100) |>
  mutate( ranking = 1:100)

# filter raw data only for top 100 and bring raking column
df_dom_100 <- df_dom[ id %in% od_rank$id]
df_dom_100[od_rank, on='id', ranking := i.ranking]

# calculate reference values
df <- df_dom_100[, .(passageiros = sum(assentos),
                 minima = min(tarifa),
                 q25 = Hmisc::wtd.quantile(x = tarifa, weights=assentos,probs = 0.25),
                 media = weighted.mean(x = tarifa, w=assentos),
                 q75 = Hmisc::wtd.quantile(x = tarifa, weights=assentos,probs = 0.75),
                 maxima = max(tarifa)
                 ),
             by = .(id, ranking, origem, destino)][order(ranking)]


df100 <- df[, .(passageiros = sum(passageiros),
                 # minima = sum(minima),
                 q25 = sum(q25),
                 media = sum(media),
                 q75 = sum(q75)
                  #, maxima = sum(maxima)
                 ),
             by = .(id, ranking)][order(ranking)]

```

```{r, warning=FALSE, message=FALSE, echo=FALSE, eval=ifelse(exists('df_output'),FALSE,TRUE)}
#| label: prepare-output

# bring OD pair info back
df100[df_dom_100, on='id', od_pair := i.od_pair ]
df100[, origem := substring(od_pair, 1, 4)]
df100[, destino := substring(od_pair, 6, 9)]

# add airport information
airports <- data.table::fread('./data-raw/airports_bra.csv', encoding = 'UTF-8')

df100[airports,
   on=c('origem'='icao_code'),
   c('orig_iata', 'orig_muni') := list(i.iata_code, i.city_name )]

df100[airports,
   on=c('destino'='icao_code'),
   c('dest_iata', 'dest_muni') := list(i.iata_code, i.city_name )]

# reorganize origem and destino columns
df100[, De := paste0(orig_muni," (",orig_iata,")")]
df100[, Para := paste0(dest_muni," (",dest_iata,")")]

# round values
cols <- c('q25', 'media', 'q75')
df100 <- df100 |> mutate_at(cols, ~round(.,1))


# rename and reorder columns
df_output <- df100[order(ranking)] |>
  select(Ranking = ranking,
         De,
         Para,
         `N. de passageiros` = passageiros,
         Q25 = q25,
         Média = media,
         Q75 = q75
         )

```

::: {.callout-note appearance="simple"}
Tabela com o preço da passagem área (ida + volta) dos 100 trechos com maior número de passageiros do Brasil. Valores em `R$` atualizados mensalmente a partir de todas passagens comercializadas nos dois meses mais recentes disponíveis: `r last_two_monts[1]` e `r last_two_monts[2]`.
:::




```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| label: generate-output
#| fig-height: 12
quak::quak(df_output, height = 500)
```